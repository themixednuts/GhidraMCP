<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 
        http://maven.apache.org/xsd/assembly-1.1.3.xsd">

    <!-- Just a name for reference -->
    <id>ghidra-extension</id>

    <!-- We want a .zip file -->
    <formats>
        <format>zip</format>
    </formats>

    <!-- Don't put everything in an extra top-level directory named after the assembly ID -->
    <includeBaseDirectory>false</includeBaseDirectory>

    <fileSets>
        <!-- 1) Copy extension.properties and Module.manifest into the top level 
               of a folder named GhidraMCP/ (the actual extension folder). -->
        <fileSet>
            <directory>${project.build.outputDirectory}</directory>
            <includes>
                <include>extension.properties</include>
                <include>Module.manifest</include>
            </includes>
            <outputDirectory>GhidraMCP</outputDirectory>
        </fileSet>

        <!-- 2) Copy your built plugin JAR into GhidraMCP/lib -->
        <fileSet>
            <directory>${project.build.directory}</directory>
            <includes>
                <!-- Use the finalized JAR name from the maven-jar-plugin -->
                <include>GhidraMCP.jar</include>
            </includes>
            <outputDirectory>GhidraMCP/lib</outputDirectory>
        </fileSet>
    </fileSets>
    <!-- 3) ADD THIS SECTION: Copy runtime dependencies into GhidraMCP/lib -->
    <dependencySets>
        <dependencySet>
            <!-- Specifies where the dependency JARs go -->
            <outputDirectory>GhidraMCP/lib</outputDirectory>
            <!-- Don't include the project's own artifact (GhidraMCP.jar), 
                 it's already handled by the fileSet above -->
            <useProjectArtifact>false</useProjectArtifact>
            <!-- Copy dependencies needed for running the plugin (includes 'compile' scope) -->
            <scope>runtime</scope>
            <!-- We want the JAR files, not their contents unpacked -->
            <unpack>false</unpack>
        </dependencySet>
    </dependencySets>
</assembly>
