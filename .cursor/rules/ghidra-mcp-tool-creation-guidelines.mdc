---
description: 
globs: src/main/java/com/themixednuts/tools/**/*.java
alwaysApply: false
---
# Creating New Ghidra MCP Tools - Templates & Guidelines

This guide provides templates and key patterns for creating new Ghidra MCP tools, implementing [`IGhidraMcpSpecification`](mdc:src/main/java/com/themixednuts/tools/IGhidraMcpSpecification.java).

**Core Steps:**

1.  **Implement & Annotate:**
    *   Implement [`IGhidraMcpSpecification`](mdc:src/main/java/com/themixednuts/tools/IGhidraMcpSpecification.java).
    *   Add [`@GhidraMcpTool`](mdc:src/main/java/com/themixednuts/annotation/GhidraMcpTool.java) annotation:
        *   `name`: User-facing name in Ghidra Tool Options (e.g., "List Functions").
        *   `description`: Hover description in Ghidra Tool Options.
        *   `category`: Category in Ghidra Tool Options (e.g., [`ToolCategory.FUNCTIONS`](mdc:src/main/java/com/themixednuts/tools/ToolCategory.java)). **Use an existing category or `ToolCategory.UNCATEGORIZED`. Do NOT add new categories to the `ToolCategory` enum.**
        *   `mcpName`: Name for the MCP tool specification (e.g., "list_functions").
        *   `mcpDescription`: Description for the MCP tool specification.
2.  **Register Service:** Add the fully qualified class name to `src/main/resources/META-INF/services/com.themixednuts.tools.IGhidraMcpSpecification`. **This step is mandatory for the tool to be loaded and must be performed automatically when creating a new tool class.**
3.  **Naming Convention:** Follow standard CRUD naming conventions for both the Java class (`Ghidra<Action><Noun>Tool`) and the `mcpName` (`<action>_<noun>`) where possible:
    *   **Create:** Use `Create` for adding new items (e.g., `GhidraCreateBookmarkTool`, `create_bookmark`). Avoid synonyms like `Add`.
    *   **Read:** Use `Get` for single items (e.g., `GhidraGetFunctionByNameTool`), `List` for multiple items (e.g., `GhidraListFunctionsTool`), or `Search` for querying (e.g., `GhidraSearchMemoryTool`).
    *   **Update:** Use `Update` for modifying existing items (e.g., `GhidraUpdateStructMemberTool`). Avoid synonyms like `Edit`, `Set`, or `Change`.
    *   **Delete:** Use `Delete` for removing items (e.g., `GhidraDeleteFunctionTool`). Avoid synonyms like `Remove` or `Clear`.
4.  **Data Models (POJOs):** When a tool needs to return complex data structures (e.g., a list of functions with their details), prefer using or creating Plain Old Java Objects (POJOs) within the [`src/main/java/com/themixednuts/models`](mdc:src/main/java/com/themixednuts/models) directory.
    *   **Reuse:** Check if an existing model (like [`FunctionInfo`](mdc:src/main/java/com/themixednuts/models/FunctionInfo.java), [`SymbolInfo`](mdc:src/main/java/com/themixednuts/models/SymbolInfo.java), `DataInfo`, etc.) already suits the needs.
    *   **Create:** If no suitable model exists, create a new, clearly named POJO in the `models` directory to represent the data being returned. This ensures consistent and well-defined output structures for the client.
    *   Keep POJOs simple, primarily containing fields and a constructor or mapping method to populate them from Ghidra objects.
    *   **Exception:** For grouped operations, use the nested POJOs `IGroupedTool.OperationResult` and `IGroupedTool.GroupedOperationResult` instead of creating separate files.
5.  **`specification` Method:**
    *   **DO NOT override the `specification` method in individual tool classes.**
    *   The default implementation in `IGhidraMcpSpecification` handles retrieving the `@GhidraMcpTool` annotation, generating the schema string from `schema()`, and constructing the final `AsyncToolSpecification`.
    *   This default implementation correctly wraps the `Mono<Object>` from `execute` using `.flatMap(this::createSuccessResult).onErrorResume(this::createErrorResult)` to produce the required `Mono<CallToolResult>`.
5.  **Test Verification:** After implementing one or more tools, run `mvn test` from the project root directory. This verifies that the new tool(s) compile correctly and are properly registered in the service file (via `ServiceRegistrationTest.java`). It's often efficient to create a batch of related tools before running the tests.
6.  **Code Cleanup:** Ensure code is well-formatted and remove any unused imports before finalizing the tool.

---

## Commenting

*   Avoid comments that merely restate the code or describe the immediate code block (e.g., `// Setup phase`, `// Validation`).
*   Remove commented-out code blocks.
*   Add comments only for non-trivial logic, complex algorithms, or to explain the "why" behind a specific implementation choice if it's not immediately obvious.

---

## `@GhidraMcpTool` Annotation Details

*   `name`: User-facing name in Ghidra Tool Options (e.g., "List Functions").
*   `description`: Hover description in Ghidra Tool Options.
*   `category`: Category in Ghidra Tool Options (e.g., [`ToolCategory.FUNCTIONS`](mdc:src/main/java/com/themixednuts/tools/ToolCategory.java)). Use existing or `UNCATEGORIZED`.
*   `mcpName`: Name for the MCP tool specification (e.g., "list_functions").
*   `mcpDescription`: Description for the MCP tool specification.

---

## Naming Convention Details

Follow standard CRUD naming conventions for both the Java class (`Ghidra<Action><Noun>Tool`) and the `mcpName` (`<action>_<noun>`) where possible:
*   **Create:** `Create` (e.g., `GhidraCreateBookmarkTool`, `create_bookmark`).
*   **Read:** `Get` (single), `List` (multiple), `Search` (query).
*   **Update:** `Update` (e.g., `GhidraUpdateStructMemberTool`).
*   **Delete:** `Delete` (e.g., `GhidraDeleteFunctionTool`).

---

## Data Models (POJOs) Details

*   Use POJOs in [`src/main/java/com/themixednuts/models`](mdc:src/main/java/com/themixednuts/models) for complex results.
*   Reuse existing models ([`FunctionInfo`](mdc:src/main/java/com/themixednuts/models/FunctionInfo.java), [`SymbolInfo`](mdc:src/main/java/com/themixednuts/models/SymbolInfo.java), etc.) if possible.
*   Create new simple POJOs if needed.
*   **Grouped Tools Exception:** Use nested POJOs `IGroupedTool.OperationResult` and `IGroupedTool.GroupedOperationResult`.

---

## Test Verification Details

Run `mvn test` from the project root to verify compilation and service registration (`ServiceRegistrationTest.java`).

---

## Core Interface Methods

The `IGhidraMcpSpecification` interface provides a `default` implementation for generating the `AsyncToolSpecification` needed by the MCP server. This default implementation automatically handles reading the `@GhidraMcpTool` annotation, calling your `schema()` method, serializing the schema, and wrapping the `Mono<Object>` returned by your `execute()` method into the final `CallToolResult`.

**Therefore, your main responsibilities when implementing `IGhidraMcpSpecification` are:**
*   Add the `@GhidraMcpTool` annotation.
*   Implement `JsonSchema schema()` (unless implementing `IGroupedTool`, which provides a default).
*   Implement `Mono<? extends Object> execute(...)`.
*   Register the tool in the META-INF services file.

---

## `schema()` Method Template

Implement this method to define the expected input arguments for your tool (unless implementing `IGroupedTool`, which provides a default).

Use the [`JsonSchemaBuilder`](mdc:src/main/java/com/themixednuts/utils/jsonschema/JsonSchemaBuilder.java) helper to create an immutable [`JsonSchema`](mdc:src/main/java/com/themixednuts/utils/jsonschema/JsonSchema.java) object.

```java
@Override // Omit if implementing IGroupedTool
public JsonSchema schema() {
    // Start with the base schema helper from IGhidraMcpSpecification
    IObjectSchemaBuilder schemaRoot = IGhidraMcpSpecification.createBaseSchemaNode();

    // --- Define Properties ---

    // *Only* include ARG_FILE_NAME if the tool requires access to a specific Program.
    schemaRoot.property(ARG_FILE_NAME, // Constant from IGhidraMcpSpecification
            JsonSchemaBuilder.string(mapper)
                    .description("The name of the program file (required for program access)."));

    // Define tool-specific arguments (use constants defined in this class or IGhidraMcpSpecification)
    // public static final String ARG_MY_NEW_ARG = "myNewArg";
    schemaRoot.property(ARG_MY_NEW_ARG,
            JsonSchemaBuilder.bool(mapper).description("A required boolean specific to this tool."));

    // --- Define Required Properties ---

    // Only include arguments that MUST be provided.
    schemaRoot.requiredProperty(ARG_FILE_NAME); // If program access is needed
    schemaRoot.requiredProperty(ARG_MY_NEW_ARG); // If tool-specific arg is required

    return schemaRoot.build();
}
```

---

## `execute(...)` Method Templates

Implement this method containing the core logic. Return a `Mono<? extends Object>` emitting the **raw result object** (POJO, List, String, `GroupedOperationResult`, etc.) or signaling an error (`Mono.error(throwable)` or throwing from sync blocks like `.map`). **Do NOT call `createSuccessResult` or `createErrorResult` here.** The `IGhidraMcpSpecification` default `specification()` method correctly wraps this `Mono<? extends Object>`.

**Note on `.cast(Object.class)`:** Due to the `execute` method now returning `Mono<? extends Object>`, you generally **no longer need** to add `.cast(Object.class)` at the end of your reactive chain if it naturally produces a `Mono<SpecificType>` (e.g., `Mono<Map<String, String>>`, `Mono<List<Pojo>>`). The `Mono<SpecificType>` will be compatible with `Mono<? extends Object>`.

**Note:** Comments within the template code blocks below are for explanation only and should generally *not* be copied into actual tool implementations, per the commenting guidelines.

Use helpers from [`IGhidraMcpSpecification`](mdc:src/main/java/com/themixednuts/tools/IGhidraMcpSpecification.java) (`getProgram`, `executeInTransaction`, argument parsers). Avoid `try-catch` unless required by Java (e.g., handling checked exceptions from Ghidra APIs by wrapping them in unchecked exceptions).

**Use the appropriate reactive pattern:**
*   For synchronous logic *after* obtaining the `Program` (e.g., parsing arguments, calling a synchronous Ghidra service that doesn't modify the database), use `.map()`: `getProgram(...).map(program -> { /* sync logic */ })`.
*   **Do NOT use `.flatMap(program -> Mono.fromCallable(...))`** if the logic inside the `Callable` is purely synchronous; prefer `.map()`.
*   For synchronous logic that modifies the database, use `.map()` for setup followed by `.flatMap(executeInTransaction(...))`: `getProgram(...).map(program -> { /* setup */ return context; }).flatMap(context -> executeInTransaction(...))`.
*   For purely synchronous, project-level logic (no `Program` needed initially), use `Mono.fromCallable(() -> { /* sync logic */ })`.

**Type-Safe Context Passing:** When passing multiple values from a setup step (e.g., inside `.map`) to a subsequent step (e.g., inside `.flatMap`), **avoid using `Map<String, Object>`**. Instead, use a type-safe approach:
*   **Nested `private static record**:** Preferred for clarity when passing more than 2-3 items. Define the record within the tool class.
*   **Reactor Tuples:** Use `reactor.util.function.Tuples.of(...)` for 2-8 items if a dedicated record feels excessive.

**1. Program-Based Tool (Read-Only / Pagination / Synchronous Logic)**

*   Needs `Program` access.
*   Uses `getProgram(...).map(...)`.
*   Returns `Mono<Object>` containing a [`PaginatedResult<Pojo>`](mdc:src/main/java/com/themixednuts/utils/PaginatedResult.java) (or similar POJO/Map structure with `results` and `nextCursor`).
*   Reference: [`GhidraListCategoriesTool`](mdc:src/main/java/com/themixednuts/tools/datatypes/GhidraListCategoriesTool.java)

```java
import com.themixednuts.utils.PaginatedResult; // Add import

@Override
public Mono<? extends Object> execute(McpAsyncServerExchange ex, Map<String, Object> args, PluginTool tool) {
    return getProgram(args, tool) // Returns Mono<Program>
        .map(program -> { // Use .map for synchronous logic
            // --- Setup Phase (Inside .map) ---
            String cursor = getOptionalStringArgument(args, ARG_CURSOR).orElse(null);
            final String finalCursor = cursor; // For use in lambda
            final int limit = DEFAULT_PAGE_LIMIT;

            List<Item> allItems = program.getListing().getAllItems()
                .stream()
                .sorted(Comparator.comparing(Item::getKey))
                .collect(Collectors.toList());

            // --- Data Retrieval & Processing (Apply Pagination) ---
            List<ResultPojo> pageItems = allItems.stream()
                .dropWhile(item -> finalCursor != null && item.getKey().compareTo(finalCursor) <= 0)
                .limit((long) limit + 1)
                .map(item -> new ResultPojo(item))
                .collect(Collectors.toList());

            boolean hasMore = pageItems.size() > limit;
            List<ResultPojo> pageResults = pageItems.subList(0, Math.min(pageItems.size(), limit));

            String nextCursor = null;
            if (hasMore && !pageResults.isEmpty()) {
                nextCursor = pageResults.get(pageResults.size() - 1).getCursorKey();
            }

            // --- Return Raw Result Object (PaginatedResult) ---
            return new PaginatedResult<>(pageResults, nextCursor);
        });
}
```

**2. Program-Based Tool (Modification / Task Monitor / Resource Management)**

*   Needs `Program` access and modifies it.
*   Uses `getProgram(...).map(...).flatMap(executeInTransaction(...))`.
*   `.map` performs synchronous setup and **returns a type-safe context object** (e.g., a nested record or `Tuple`) containing necessary data (including the `Program` instance) for the transaction.
*   `executeInTransaction` takes a `Callable<Object>` for the synchronous modification work.
*   Shows resource management (`DecompInterface`) and `GhidraMcpTaskMonitor`.
*   Returns `Mono<Object>` (e.g., success `String`, relevant data `Object`).
*   Reference: [`GhidraRenameFunctionByNameTool`](mdc:src/main/java/com/themixednuts/tools/functions/GhidraRenameFunctionByNameTool.java), [`GhidraDeleteBookmarkTool`](mdc:src/main/java/com/themixednuts/tools/projectmanagement/GhidraDeleteBookmarkTool.java)

```java
// Define nested context record (example)
private static record RenameContext(
    Program program,
    Function function,
    String newName
) {}

@Override
public Mono<? extends Object> execute(McpAsyncServerExchange ex, Map<String, Object> args, PluginTool tool) {
    DecompInterface decomp = new DecompInterface(); // Resource needing cleanup

    return getProgram(args, tool) // Returns Mono<Program>
        .map(program -> { // .map for synchronous setup
            // --- Setup Phase (Synchronous inside map) ---
            decomp.openProgram(program);
            String name = getRequiredStringArgument(args, ARG_NAME);
            Function function = program.getFunctionManager().getFunction(name);
            if (function == null) {
                throw new IllegalArgumentException("Function not found: " + name);
            }
            String newName = getRequiredStringArgument(args, ARG_NEW_NAME);
            // Return type-safe context object
            return new RenameContext(program, function, newName);
        })
        .flatMap(context -> { // Transaction Phase - context is RenameContext
            // Program program = context.program();
            // Function function = context.function();
            // String newName = context.newName();

            return executeInTransaction(context.program(), "Rename Func " + context.function().getName(), () -> {
                // --- Modification Work (Inside Transaction Callable - Synchronous) ---
                // GhidraMcpTaskMonitor monitor = new GhidraMcpTaskMonitor(ex, ...);
                context.function().setName(context.newName(), SourceType.USER_DEFINED);
                // Return raw success result
                return "Function renamed successfully to " + context.newName();
            });
        })
        .doFinally(signalType -> {
            if (decomp != null) {
                decomp.dispose();
            }
        });
}
```

**3. Project-Based Tool (Read-Only / Synchronous Logic)**

*   Needs `Project` access, not specific `Program`.
*   Schema does NOT need `fileName`.
*   Uses `Mono.fromCallable(() -> { ... })` to wrap synchronous logic.
*   Returns `Mono<Object>` (e.g., `List<String>`).
*   Reference: [`GhidraListFilesTool`](mdc:src/main/java/com/themixednuts/tools/projectmanagement/GhidraListFilesTool.java)

```java
@Override // No ARG_FILE_NAME needed
public JsonSchema schema() {
    IObjectSchemaBuilder schemaRoot = IGhidraMcpSpecification.createBaseSchemaNode();
    // Add other args if needed...
    return schemaRoot.build();
}

@Override
public Mono<? extends Object> execute(McpAsyncServerExchange ex, Map<String, Object> args, PluginTool tool) {
    return Mono.fromCallable(() -> {
        ghidra.framework.model.Project project = tool.getProject();
        if (project == null) {
            throw new IllegalStateException("Ghidra Project is not available.");
        }
        // Perform project-level operations and return raw result
        return project.getOpenData().stream().map(DomainFile::getName).sorted().collect(Collectors.toList());
    });
}
```

---

## Pagination Pattern (Cursor-Based)

For tools implementing cursor-based pagination via `tools/call`:

1.  **Schema:** The `ARG_CURSOR` constant (defined in `IGhidraMcpSpecification`) should **NOT** be included as a property in the `schema()` definition. The MCP client is expected to handle passing the cursor implicitly if `nextCursor` was returned in the previous response.
2.  **Execution:** Inside the `execute()` method, still attempt to read the cursor using `getOptionalStringArgument(args, ARG_CURSOR)`. This allows the tool logic to handle the presence of a cursor passed by the client.
3.  **Result:** The `Mono<Object>` returned by `execute()` should emit a [`PaginatedResult<Pojo>`](mdc:src/main/java/com/themixednuts/utils/PaginatedResult.java) object containing the list of results and the next cursor value (if any). Example:
    ```java
    // Inside execute(...).map(...) or similar
    List<MyPojo> pageResults = ... ;
    String nextCursor = (hasMore) ? calculateNextCursor(...) : null;
    // Return the PaginatedResult object directly
    return new PaginatedResult<>(pageResults, nextCursor);
    ```
4.  **Reference:** See [`GhidraListCategoriesTool`](mdc:src/main/java/com/themixednuts/tools/datatypes/GhidraListCategoriesTool.java) for an example implementation (note: this example was refactored to return a `Map` but the principle remains; using `PaginatedResult` is preferred according to this rule).

---

## Grouped Operations Pattern

*   Implement [`IGroupedTool`](mdc:src/main/java/com/themixednuts/tools/grouped/IGroupedTool.java) alongside `IGhidraMcpSpecification`.
*   Implement `getToolClassMap()` to return discovered granular tool classes.
*   **Omit** `schema()` override (default provided by `IGroupedTool`).
*   Implement `execute()` to call the default `executeGroupedOperations()`.
*   Reference: [`GroupedFunctionOperationsTool`](mdc:src/main/java/com/themixednuts/tools/grouped/GroupedFunctionOperationsTool.java)

```java
@GhidraMcpTool(name = "Grouped Function Ops", ... category = ToolCategory.GROUPED, ...)
public class GroupedFunctionOperationsTool implements IGhidraMcpSpecification, IGroupedTool {

    private static final Map<String, Class<? extends IGhidraMcpSpecification>> TOOL_CLASS_MAP;
    static {
        TOOL_CLASS_MAP = IGroupedTool.getGranularToolClasses(ToolCategory.FUNCTIONS.getCategoryName())
            .stream()
            .collect(Collectors.toConcurrentMap( // Use ConcurrentMap
                toolClass -> toolClass.getAnnotation(GhidraMcpTool.class).mcpName(),
                toolClass -> toolClass
            ));
    }

    @Override
    public Map<String, Class<? extends IGhidraMcpSpecification>> getToolClassMap() {
        return TOOL_CLASS_MAP;
    }

    // schema() method is provided by IGroupedTool default

    @Override
    public Mono<? extends Object> execute(McpAsyncServerExchange ex, Map<String, Object> args, PluginTool tool) {
        // Delegate execution to the default grouped operations handler
        return executeGroupedOperations(ex, args, tool);
    }
}
```

---

## Ghidra API Documentation Links

*   **Ghidra Commands (`Cmd`) are found within the following `ghidra.app.cmd.*` these are the only packages, refer directly to the docs. packages:**
    *   [`ghidra.app.cmd.analysis`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/analysis/package-summary.html)
    *   [`ghidra.app.cmd.comments`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/comments/package-summary.html)
    *   [`ghidra.app.cmd.data`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/data/package-summary.html)
    *   [`ghidra.app.cmd.disassemble`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/disassemble/package-summary.html)
    *   [`ghidra.app.cmd.equate`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/equate/package-summary.html)
    *   [`ghidra.app.cmd.formats`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/formats/package-summary.html)
    *   [`ghidra.app.cmd.function`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/function/package-summary.html)
    *   [`ghidra.app.cmd.label`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/label/package-summary.html)
    *   [`ghidra.app.cmd.memory`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/memory/package-summary.html)
    *   [`ghidra.app.cmd.module`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/module/package-summary.html)
    *   [`ghidra.app.cmd.refs`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/refs/package-summary.html)
    *   [`ghidra.app.cmd.register`](mdc:https:/ghidra.re/ghidra_docs/api/ghidra/app/cmd/register/package-summary.html)
*   **Core Models (`Program`, `Listing`, `DataType`, `Function`, `Address`, `Symbol`, etc.) live under `ghidra.program.model.*`:**
    *   Listing API: [`ghidra.program.model.listing`](mdc:ghidra.program.model.listing)
    *   Address API: [`ghidra.program.model.address`](mdc:ghidra.program.model.address)
    *   Symbol API: [`ghidra.program.model.symbol`](mdc:ghidra.program.model.symbol)
    *   Data API: [`ghidra.program.model.data`](mdc:ghidra.program.model.data)
    *   PCode API: [`ghidra.program.model.pcode`](mdc:ghidra.program.model.pcode)
    *   Etc.
*   **Decompiler:** [`ghidra.app.decompiler.DecompInterface`](mdc:ghidra.app.decompiler.DecompInterface)
*   **Task Monitor:** [`ghidra.util.task.TaskMonitor`](mdc:ghidra.util.task.TaskMonitor)
